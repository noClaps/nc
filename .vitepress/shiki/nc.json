{
  "displayName": "NC",
  "fileTypes": ["nc"],
  "name": "nc",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#function-calls"
    },
    {
      "include": "#types"
    },
    {
      "include": "#arrays-maps"
    },
    {
      "include": "#tuples"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#chars"
    },
    {
      "include": "#control-structures"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#match-expressions"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.conditional.nc",
          "match": "\\b(if|else|match)\\b"
        },
        {
          "name": "keyword.control.loop.nc",
          "match": "\\b(for|in|while|break|continue)\\b"
        },
        {
          "name": "keyword.control.flow.nc",
          "match": "\\b(return|try)\\b"
        },
        {
          "name": "keyword.other.fn.nc",
          "match": "\\b(fn)\\b"
        },
        {
          "name": "keyword.other.import.nc",
          "match": "\\b(import|as)\\b"
        },
        {
          "name": "keyword.other.type.nc",
          "match": "\\b(struct|enum|union|type)\\b"
        },
        {
          "name": "storage.modifier.nc",
          "match": "\\b(mut)\\b"
        },
        {
          "name": "constant.language.boolean.nc",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.nc",
          "match": "\\b(none)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.nc",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.fn.nc"
            },
            "2": {
              "name": "entity.name.function.definition.nc"
            }
          },
          "end": "\\{",
          "patterns": [
            {
              "include": "#function-parameters"
            },
            {
              "include": "#return-type"
            }
          ]
        },
        {
          "name": "meta.function.builtin.nc",
          "match": "\\b(print|println|eprint|eprintln|fprint|typeof|new|assert|panic|len|map|filter|sort|take|bool|complex|decimal|error|int|uint|bigint|str)\\b",
          "captures": {
            "1": {
              "name": "support.function.builtin.nc"
            }
          }
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "meta.function-call.nc",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.call.nc"
            }
          }
        },
        {
          "name": "meta.function-call.try.nc",
          "match": "\\b(try)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "keyword.control.flow.nc"
            },
            "2": {
              "name": "entity.name.function.call.nc"
            }
          }
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "meta.function.parameter.nc",
          "match": "\\b(bool|byte|char|complex|decimal|enum|error|int|uint|bigint|str|string|struct|type|union|void)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.nc"
            },
            "2": {
              "name": "variable.parameter.nc"
            }
          }
        },
        {
          "name": "variable.parameter.nc",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "return-type": {
      "patterns": [
        {
          "name": "meta.return-type.nc",
          "match": "(->)\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.operator.function.nc"
            },
            "2": {
              "name": "storage.type.nc"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.nc",
          "match": "\\b(bool|byte|char|complex|decimal|int|uint|bigint|string|void)\\b"
        },
        {
          "name": "storage.type.error.nc",
          "match": "\\b(error)\\b"
        },
        {
          "name": "storage.type.user.nc",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.variable.declaration.nc",
          "match": "\\b(mut\\s+)?([a-zA-Z_][a-zA-Z0-9_]*(?:\\[\\]|\\?)?)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*=",
          "captures": {
            "1": {
              "name": "storage.modifier.nc"
            },
            "2": {
              "name": "storage.type.nc"
            },
            "3": {
              "name": "variable.other.definition.nc"
            }
          }
        },
        {
          "name": "variable.other.nc",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.nc",
          "match": "\\b[0-9]+\\.[0-9]+[d]?\\b"
        },
        {
          "name": "constant.numeric.integer.nc",
          "match": "\\b[0-9]+[un]?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.nc",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.nc",
          "match": "\\*\\*|\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.logical.nc",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.nc",
          "match": "<<|>>|&|\\||\\^|~"
        },
        {
          "name": "keyword.operator.pipe.nc",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.string.nc",
          "match": "<>"
        },
        {
          "name": "keyword.operator.comparison.nc",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.range.nc",
          "match": ":"
        },
        {
          "name": "keyword.operator.array.nc",
          "match": "\\$"
        }
      ]
    },
    "arrays-maps": {
      "patterns": [
        {
          "name": "meta.type.array.nc",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\[\\]",
          "captures": {
            "1": {
              "name": "storage.type.nc"
            }
          }
        },
        {
          "name": "meta.type.map.nc",
          "match": "\\[([a-zA-Z_][a-zA-Z0-9_]*)\\]([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "storage.type.nc"
            },
            "2": {
              "name": "storage.type.nc"
            }
          }
        },
        {
          "name": "meta.type.optional.nc",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\?",
          "captures": {
            "1": {
              "name": "storage.type.nc"
            }
          }
        }
      ]
    },
    "tuples": {
      "patterns": [
        {
          "name": "meta.type.tuple.nc",
          "match": "\\(([a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*)\\)",
          "captures": {
            "1": {
              "name": "storage.type.nc"
            }
          }
        }
      ]
    },
    "chars": {
      "name": "string.quoted.single.nc",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.nc",
          "match": "\\\\."
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.nc",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.nc",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.documentation.nc",
          "match": "///.*$"
        },
        {
          "name": "comment.line.double-slash",
          "match": "//.*$"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "control-structures": {
      "patterns": [
        {
          "name": "meta.conditional.nc",
          "begin": "\\b(if)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.nc"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "name": "meta.match.nc",
          "begin": "\\b(match)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.nc"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "name": "meta.loop.for.nc",
          "begin": "\\b(for)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+(in)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.loop.nc"
            },
            "2": {
              "name": "variable.other.iterator.nc"
            },
            "3": {
              "name": "keyword.control.loop.nc"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "name": "meta.loop.while.nc",
          "begin": "\\b(while)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.loop.nc"
            }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.nc",
          "match": "\\b(import)\\s+([a-zA-Z_][a-zA-Z0-9_./]*)\\s*(?:(as)\\s+([a-zA-Z_][a-zA-Z0-9_]*))?",
          "captures": {
            "1": {
              "name": "keyword.other.import.nc"
            },
            "2": {
              "name": "string.other.module.nc"
            },
            "3": {
              "name": "keyword.other.import.nc"
            },
            "4": {
              "name": "entity.name.module.nc"
            }
          }
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#function-calls"
        },
        {
          "include": "#operators"
        }
      ]
    },
    "match-expressions": {
      "patterns": [
        {
          "name": "meta.match.expression.nc",
          "begin": "\\b(match)\\s+([a-zA-Z_][a-zA-Z0-9_.]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.nc"
            },
            "2": {
              "name": "variable.other.nc"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "name": "meta.match.case.nc",
              "match": "([a-zA-Z_][a-zA-Z0-9_]*|true|false)\\s*(->)",
              "captures": {
                "1": {
                  "name": "constant.other.match.case.nc"
                },
                "2": {
                  "name": "keyword.operator.match.nc"
                }
              }
            },
            {
              "include": "#expressions"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.nc"
}
